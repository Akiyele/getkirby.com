Title: Blocks & layouts methods
----
Intro: Handling blocks and layouts in your templates is now becoming even more flexible and powerful
----
Text:

## Extendable block and layout methods

Using the new 5 extensions below, you can write your own custom methods for the blocks and layout fields.

  - `layoutsMethods` (layouts collection)
  - `layoutMethods` (each layout)
  - `layoutColumnMethods` (each layout column)
  - `blocksMethods` (blocks collection)
  - `blockMethods` (each block)

```php
<?php

Kirby::plugin('my/blocksLayoutMethods', [
    'blockMethods' => [
        'test' => function () {
            return 'block method';
        }
    ],
    'blocksMethods' => [
        'test' => function () {
            return 'blocks method';
        }
    ],
    'layoutMethods' => [
        'test' => function () {
            return 'layout method';
        }
    ],
    'layoutColumnMethods' => [
        'test' => function () {
            return 'layout column method';
        }
    ],
    'layoutsMethods' => [
        'test' => function () {
            return 'layouts method';
        }
    ]
]);

```

## Extendable block models

Now each block type can have its own custom model. Like models for page templates or user roles.

```php
<?php

use Kirby\Cms\Block;

class HeadingBlock extends Block
{
    public function id(): string
    {
        return 'custom id';
    }
}

Kirby::plugin('my/blockModels', [
    'blockModels' => [
        'heading' => HeadingBlock::class
    ]
]);

```

## Default model for blocks

When defining a custom model, the `Kirby\Cms\Block` class represents the default model for all blocks.

```php
<?php

use Kirby\Cms\Block;

class DefaultBlock extends Block
{
    public function id(): string
    {
        return 'custom id';
    }
}

class HeadingBlock extends DefaultBlock
{
    public function test(): string
    {
        return 'Hello World!';
    }
}

Kirby::plugin('my/blockModels', [
    'blockModels' => [
        'Kirby\\Cms\\Block' => DefaultBlock::class
        'heading' => HeadingBlock::class
    ]
]);
```

## New core class methods

### `$blocks->hasType()`

Useful if you want to include scripts etc. depending on block types.

```php
$blocks = $page->blocks()->toBlocks();

if ($blocks->hasType('code') === true) {
  // include some scripts
}
```

### `$layouts->toBlocks()`

The `toBlocks()` method makes it easy to filter blocks from layouts.

```php
$layouts = $page->layout()->toLayouts();
$blocks  = $layouts->toBlocks();
$banner  = $blocks->filter('type', 'banner')->first();
```

### `$layouts->hasBlockType()`

Useful if you want to include scripts etc. depending on block types in layout field.

```php
$layouts = $page->layout()->toLayouts();

if ($layouts->hasBlockType('heading') === true) {
  // include some scripts
}
```
